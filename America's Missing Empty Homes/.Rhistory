pull(value) -
df %>%
filter(date == as.Date("2019-01-01")) %>%
pull(value)
df %>%
mutate(change_since_2019 = ifelse(date == max(date), change_since_2019, NA))
})
pacman::p_load(purrr,zctaCrosswalk,zipcodeR,nngeo,ggpubr,sf,tigris,maps,mapproj,usmap,fips,openxlsx,sf,tidycensus,cli,remotes,magick,cowplot,knitr,ghostscript,png,httr,grid,usethis,pacman,rio,ggplot2,ggthemes,quantmod,dplyr,data.table,lubridate,forecast,gifski,av,tidyr,gganimate,zoo,RCurl,Cairo,datetime,stringr,pollster,tidyquant,hrbrthemes,plotly,fredr)
theme_apricitas <- theme_ft_rc() +
theme(axis.line = element_line(colour = "white"),legend.position = c(.90,.90),legend.text = element_text(size = 14, color = "white"), legend.title =element_text(size = 14),plot.title = element_text(size = 28, color = "white")) #using a modified FT theme and white axis lines for my "theme_apricitas"
apricitas_logo <- image_read("https://github.com/Miles-byte/Apricitas/blob/main/Logo.png?raw=true") #downloading and rasterizing my "Apricitas" blog logo from github
apricitas_logo_rast <- rasterGrob(apricitas_logo, interpolate=TRUE)
devtools::install_github("UrbanInstitute/urbnmapr")
library(urbnmapr)
counties <- get_urbn_map("counties", sf = TRUE) %>%
mutate(GEOID = county_fips) %>%
select(geometry, GEOID)
states <- get_urbn_map("states", sf = TRUE) %>%
st_as_sf()
VACANCY_AGG_2019 <- get_acs(
geography = "county",
#variables = DP04,
table = "B25002",
cache_table = TRUE,
year = 2019,
output = "wide",
key = Sys.getenv("CENSUS_KEY"),
moe_level = 90,
survey = "acs5",
show_call = TRUE
) %>%
transmute(GEOID,NAME,AGG_VACANCY_RATE = B25002_003E/B25002_001E, TOTAL = B25002_001E) %>%
merge(.,counties)
AGG_VACANCY_2019_Counties <- ggplot() +
geom_sf(data = VACANCY_AGG_2019 %>% mutate(AGG_VACANCY_RATE = case_when(
AGG_VACANCY_RATE > 0.20 ~ 0.20,
TRUE ~ AGG_VACANCY_RATE
)), aes(fill = AGG_VACANCY_RATE, geometry = geometry)) +
geom_sf(data = counties, color = "black", fill = NA, lwd = 0.1) + # Black borders for counties
geom_sf(data = states, color = "black", fill = NA, lwd = 0.65) + # Black borders for states
scale_fill_gradient(high = "#00A99D",
low = "#EE6055",
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill",
breaks = c(0,0.05,0.1,0.15,0.20),
labels = c("0%","5%","10%","15%","20%+"),
limits = c(0,0.20)) +
ggtitle("            Total Vacancy Rate 2014-2019") +
theme(plot.title = element_text(size = 24)) +
labs(caption = "Graph created by @JosephPolitano using Census data") +
labs(fill = NULL) +
theme_apricitas + theme(legend.position = "right", panel.grid.major=element_blank(), axis.line = element_blank(), axis.text.x = element_blank(),axis.text.y = element_blank(),plot.margin= grid::unit(c(0, 0, 0, 0), "in"))
IN_DEPTH_VACANCY <- get_acs(
geography = "county",
#variables = DP04,
table = "B25004",
cache_table = TRUE,
year = 2019,
output = "wide",
key = Sys.getenv("CENSUS_KEY"),
moe_level = 90,
survey = "acs5",
show_call = TRUE
) %>%
transmute(GEOID,NAME,FOR_RENT = B25004_002E,UNOCCUPIED_RENTED = B25004_003E, FOR_SALE = B25004_004E, SOLD = B25004_005E, SEASONAL = B25004_006E, MIGRANT = B25004_007E, OTHER = B25004_008E)
CURRENT_RES_ELSEWHERE <- get_acs(
geography = "county",
table = "B25005",
cache_table = TRUE,
year = 2019,
output = "wide",
key = Sys.getenv("CENSUS_KEY"),
moe_level = 90,
survey = "acs5",
show_call = TRUE
) %>%
transmute(GEOID,NAME,CURRENT_RES_ELSEWHERE = B25005_002E)
RENTER_OWNER_OCCUPIED <- get_acs(
geography = "county",
table = "B25008",
cache_table = TRUE,
year = 2019,
output = "wide",
key = Sys.getenv("CENSUS_KEY"),
moe_level = 90,
survey = "acs5",
show_call = TRUE
) %>%
transmute(GEOID,NAME, TOTAL_OCCUPIED = B25008_001E, OWNER_OCCUPIED = B25008_002E, RENTER_OCCUPIED = B25008_003E)
RENTAL_VACANCY_RATES_2019 <- merge(IN_DEPTH_VACANCY,CURRENT_RES_ELSEWHERE) %>%
merge(RENTER_OWNER_OCCUPIED) %>%
mutate(OTHER = OTHER-CURRENT_RES_ELSEWHERE) %>%
mutate(RENTAL_VACANCY_RATE = FOR_RENT/(RENTER_OCCUPIED + FOR_RENT)) %>%
mutate(NON_SEASONAL_VACANCY = (FOR_RENT+FOR_SALE+OTHER)/(TOTAL_OCCUPIED+FOR_RENT+FOR_SALE+OTHER+UNOCCUPIED_RENTED+SOLD+CURRENT_RES_ELSEWHERE)) %>%
merge(.,counties)
RENTAL_VACANCY_2019_Counties <- ggplot() +
geom_sf(data = RENTAL_VACANCY_RATES_2019 %>% mutate(RENTAL_VACANCY_RATE = case_when(
RENTAL_VACANCY_RATE > 0.05 ~ 0.05,
TRUE ~ RENTAL_VACANCY_RATE
)), aes(fill = RENTAL_VACANCY_RATE, geometry = geometry)) +
geom_sf(data = counties, color = "black", fill = NA, lwd = 0.1) + # Black borders for counties
geom_sf(data = states, color = "black", fill = NA, lwd = 0.65) + # Black borders for states
scale_fill_gradient(high = "#00A99D",
low = "#EE6055",
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill",
breaks = c(0,0.05),
labels = c("0%","5%+"),
limits = c(0,0.05)) +
ggtitle("            Rental Vacancy Rate 2014-2019") +
theme(plot.title = element_text(size = 24)) +
labs(caption = "Graph created by @JosephPolitano using Census data") +
labs(fill = NULL) +
theme_apricitas + theme(legend.position = "right", panel.grid.major=element_blank(), axis.line = element_blank(), axis.text.x = element_blank(),axis.text.y = element_blank(),plot.margin= grid::unit(c(0, 0, 0, 0), "in"))
NON_SEASONAL_VACANCY_2019_Counties <- ggplot() +
geom_sf(data = RENTAL_VACANCY_RATES_2019 %>% mutate(NON_SEASONAL_VACANCY = case_when(
NON_SEASONAL_VACANCY > 0.05 ~ 0.05,
TRUE ~ NON_SEASONAL_VACANCY
)), aes(fill = NON_SEASONAL_VACANCY, geometry = geometry)) +
geom_sf(data = counties, color = "black", fill = NA, lwd = 0.1) + # Black borders for counties
geom_sf(data = states, color = "black", fill = NA, lwd = 0.65) + # Black borders for states
scale_fill_gradient(high = "#FFE98F",
low = "#3083DC",
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill",
breaks = c(0,0.05),
labels = c("0%","5%+"),
limits = c(0,0.05)) +
ggtitle("  Unoccupied Housing Rate (Ex-Seasonal) 2014-2019") +
labs(caption = "Graph created by @JosephPolitano using Census data") +
labs(fill = NULL) +
theme_apricitas + theme(plot.title = element_text(size = 25)) + theme(legend.position = "right", panel.grid.major=element_blank(), axis.line = element_blank(), axis.text.x = element_blank(),axis.text.y = element_blank(),plot.margin= grid::unit(c(0, 0, 0, 0), "in"))
setwd("~/GitHub/Apricitas/America's Missing Empty Homes")
years <- c(2005:2019,2021,2022)
final_df_IN_DEPTH_VACANCY <- NULL
final_df_CURRENT_RES_ELSEWHERE <- NULL
final_df_RENTER_OWNER_OCCUPIED <- NULL
for(year in years){
IN_DEPTH_VACANCY <- get_acs(
geography = "county",
#variables = DP04,
table = "B25004",
cache_table = TRUE,
year = year,
output = "wide",
key = Sys.getenv("CENSUS_KEY"),
moe_level = 90,
survey = "acs1",
show_call = TRUE
) %>%
transmute(GEOID,NAME,FOR_RENT = B25004_002E,UNOCCUPIED_RENTED = B25004_003E, FOR_SALE = B25004_004E, SOLD = B25004_005E, SEASONAL = B25004_006E, MIGRANT = B25004_007E, OTHER = B25004_008E) %>%
mutate(YEAR = as.Date(paste0(year,"-01-01")))
CURRENT_RES_ELSEWHERE <- get_acs(
geography = "county",
table = "B25005",
cache_table = TRUE,
year = year,
output = "wide",
key = Sys.getenv("CENSUS_KEY"),
moe_level = 90,
survey = "acs1",
show_call = TRUE
) %>%
transmute(GEOID,NAME,CURRENT_RES_ELSEWHERE = B25005_002E) %>%
mutate(YEAR = as.Date(paste0(year,"-01-01")))
RENTER_OWNER_OCCUPIED <- RENTER_OWNER_OCCUPIED <- get_acs(
geography = "county",
table = "B25008",
cache_table = TRUE,
year = year,
output = "wide",
key = Sys.getenv("CENSUS_KEY"),
moe_level = 90,
survey = "acs1",
show_call = TRUE
) %>%
transmute(GEOID,NAME, TOTAL_OCCUPIED = B25008_001E, OWNER_OCCUPIED = B25008_002E, RENTER_OCCUPIED = B25008_003E) %>%
mutate(YEAR = as.Date(paste0(year,"-01-01")))
final_df_IN_DEPTH_VACANCY <- rbind(final_df_IN_DEPTH_VACANCY, IN_DEPTH_VACANCY)
final_df_CURRENT_RES_ELSEWHERE <- rbind(final_df_CURRENT_RES_ELSEWHERE, CURRENT_RES_ELSEWHERE)
final_df_RENTER_OWNER_OCCUPIED <- rbind(final_df_RENTER_OWNER_OCCUPIED, RENTER_OWNER_OCCUPIED)
}
RENTAL_VACANCY_RATES_2005_2022 <- merge(final_df_IN_DEPTH_VACANCY,final_df_CURRENT_RES_ELSEWHERE) %>%
merge(final_df_RENTER_OWNER_OCCUPIED) %>%
mutate(OTHER = OTHER-CURRENT_RES_ELSEWHERE) %>%
mutate(RENTAL_VACANCY_RATE = FOR_RENT/(RENTER_OCCUPIED + FOR_RENT)) %>%
mutate(NON_SEASONAL_VACANCY = (FOR_RENT+FOR_SALE+OTHER)/(TOTAL_OCCUPIED+FOR_RENT+FOR_SALE+OTHER+UNOCCUPIED_RENTED+SOLD+CURRENT_RES_ELSEWHERE)) %>%
full_join(.,counties)
RENTAL_VACANCY_RATES_2005_2022<- ggplot() + #plotting rent by A/B/C City Size
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "Los Angeles County, California"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Los Angeles"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "New York County, New York"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Manhattan"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "Queens County, New York"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Queens"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "Bronx County, New York"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Bronx"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "Richmond County, New York"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Staten Island"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "Kings County, New York"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Brooklyn"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "Cook County, Illinois"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Chicago"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "Harris County, Texas"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Houston"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "San Francisco County, California"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "San Francisco"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "King County, Washington"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Seattle"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "Fulton County, Georgia"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Atlanta"), size = 1.25) +
xlab("Date") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0,.08), expand = c(0,0)) +
ylab("Percent") +
ggtitle("Superstar Upset") +
labs(caption = "Graph created by @JosephPolitano using BLS data",subtitle = "Prices Growth in Smaller Metros Has Caught Up to Larger Metros") +
theme_apricitas + theme(legend.position = c(.45,.9)) +
scale_color_manual(name= NULL ,values = c("#FFE98F","#00A99D","#EE6055","#A7ACD9","#9A348E")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2015-01-01")-(.1861*(today()-as.Date("2015-01-01"))), xmax = as.Date("2015-01-01")-(0.049*(today()-as.Date("2015-01-01"))), ymin = 0-(.3*.08), ymax = 0) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
NON_SEASONAL_VACANCY_2005_2022_NY_SF <- ggplot() + #plotting rent by A/B/C City Size
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "New York County, New York"), aes(x=YEAR,y= NON_SEASONAL_VACANCY, color= "Manhattan"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "San Francisco County, California"), aes(x=YEAR,y= NON_SEASONAL_VACANCY, color= "San Francisco"), size = 1.25) +
xlab("Date") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0,.055), expand = c(0,0)) +
ylab("Percent") +
ggtitle("The Post-Pandemic Rebound") +
labs(caption = "Graph created by @JosephPolitano using Census data",subtitle = "Vacancy Rates for Manhattan and San Francisco Have Fallen From COVID Highs") +
theme_apricitas + theme(legend.position = c(.45,.9)) +
scale_color_manual(name= "Gross Vacancy Rate Excluding Seasonal/Occasional Vacancies" ,values = c("#FFE98F","#00A99D","#EE6055","#A7ACD9","#9A348E")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2005-01-01")-(.1861*(today()-as.Date("2005-01-01"))), xmax = as.Date("2005-01-01")-(0.049*(today()-as.Date("2005-01-01"))), ymin = 0-(.3*.055), ymax = 0) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
NON_SEASONAL_VACANCY_2005_2022_NY_SF <- ggplot() + #plotting rent by A/B/C City Size
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "Harris County, Texas"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Houston (Harris County)"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "Fulton County, Georgia"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Atlanta (Fulton County)"), size = 1.25) +
geom_line(data=filter(RENTAL_VACANCY_RATES_2005_2022, NAME == "Maricopa County, Arizona"), aes(x=YEAR,y= RENTAL_VACANCY_RATE, color= "Phoenix (Maricopa County)"), size = 1.25) +
xlab("Date") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0,.055), expand = c(0,0)) +
ylab("Percent") +
ggtitle("The Post-Pandemic Rebound") +
labs(caption = "Graph created by @JosephPolitano using Census data",subtitle = "Vacancy Rates for Manhattan and San Francisco Have Fallen From COVID Highs") +
theme_apricitas + theme(legend.position = c(.45,.9)) +
scale_color_manual(name= "Gross Vacancy Rate Excluding Seasonal/Occasional Vacancies" ,values = c("#FFE98F","#00A99D","#EE6055","#A7ACD9","#9A348E")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2005-01-01")-(.1861*(today()-as.Date("2005-01-01"))), xmax = as.Date("2005-01-01")-(0.049*(today()-as.Date("2005-01-01"))), ymin = 0-(.3*.055), ymax = 0) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
years <- c(2005:2019,2021,2022)
final_df_IN_DEPTH_VACANCY_MSA <- NULL
final_df_CURRENT_RES_ELSEWHERE_MSA <- NULL
final_df_RENTER_OWNER_OCCUPIED_MSA <- NULL
for(year in years){
IN_DEPTH_VACANCY <- get_acs(
geography = "metropolitan statistical area/micropolitan statistical area",
#variables = DP04,
table = "B25004",
cache_table = TRUE,
year = year,
output = "wide",
key = Sys.getenv("CENSUS_KEY"),
moe_level = 90,
survey = "acs1",
show_call = TRUE
) %>%
transmute(GEOID,NAME,FOR_RENT = B25004_002E,UNOCCUPIED_RENTED = B25004_003E, FOR_SALE = B25004_004E, SOLD = B25004_005E, SEASONAL = B25004_006E, MIGRANT = B25004_007E, OTHER = B25004_008E) %>%
mutate(YEAR = as.Date(paste0(year,"-01-01")))
CURRENT_RES_ELSEWHERE <- get_acs(
geography = "metropolitan statistical area/micropolitan statistical area",
table = "B25005",
cache_table = TRUE,
year = year,
output = "wide",
key = Sys.getenv("CENSUS_KEY"),
moe_level = 90,
survey = "acs1",
show_call = TRUE
) %>%
transmute(GEOID,NAME,CURRENT_RES_ELSEWHERE = B25005_002E) %>%
mutate(YEAR = as.Date(paste0(year,"-01-01")))
RENTER_OWNER_OCCUPIED <- RENTER_OWNER_OCCUPIED <- get_acs(
geography = "metropolitan statistical area/micropolitan statistical area",
table = "B25008",
cache_table = TRUE,
year = year,
output = "wide",
key = Sys.getenv("CENSUS_KEY"),
moe_level = 90,
survey = "acs1",
show_call = TRUE
) %>%
transmute(GEOID,NAME, TOTAL_OCCUPIED = B25008_001E, OWNER_OCCUPIED = B25008_002E, RENTER_OCCUPIED = B25008_003E) %>%
mutate(YEAR = as.Date(paste0(year,"-01-01")))
final_df_IN_DEPTH_VACANCY_MSA <- rbind(final_df_IN_DEPTH_VACANCY_MSA, IN_DEPTH_VACANCY)
final_df_CURRENT_RES_ELSEWHERE_MSA <- rbind(final_df_CURRENT_RES_ELSEWHERE_MSA, CURRENT_RES_ELSEWHERE)
final_df_RENTER_OWNER_OCCUPIED_MSA <- rbind(final_df_RENTER_OWNER_OCCUPIED_MSA, RENTER_OWNER_OCCUPIED)
}
RENTAL_VACANCY_RATES_2005_2022_MSA <- merge(final_df_IN_DEPTH_VACANCY_MSA,final_df_CURRENT_RES_ELSEWHERE_MSA) %>%
merge(final_df_RENTER_OWNER_OCCUPIED_MSA) %>%
mutate(OTHER = OTHER-CURRENT_RES_ELSEWHERE) %>%
mutate(RENTAL_VACANCY_RATE = FOR_RENT/(RENTER_OCCUPIED + FOR_RENT)) %>%
mutate(NON_SEASONAL_VACANCY = (FOR_RENT+FOR_SALE+OTHER)/(TOTAL_OCCUPIED+FOR_RENT+FOR_SALE+OTHER+UNOCCUPIED_RENTED+SOLD+CURRENT_RES_ELSEWHERE))
states_list <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA",
"HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD",
"MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ",
"NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC",
"SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY")
states_data_list <- map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
change_since_2019 <- df %>%
filter(date >= as.Date("2019-01-01")) %>%
arrange(desc(date)) %>%
slice_head(n = 1) %>%
pull(value) -
df %>%
filter(date == as.Date("2019-01-01")) %>%
pull(value)
df %>%
mutate(change_since_2019 = ifelse(date == max(date), change_since_2019, NA))
})
states_data <- bind_rows(states_data_list)
map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
change_since_2019 <- df %>%
filter(date >= as.Date("2019-01-01")) %>%
arrange(desc(date)) %>%
slice_head(n = 1) %>%
pull(value) -
df %>%
filter(date == as.Date("2019-01-01")) %>%
pull(value)
df %>%
mutate(change_since_2019 = ifelse(date == max(date), change_since_2019, NA))
})
states_data_list <- map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
value_2019 <- df %>%
filter(date == as.Date("2019-01-01")) %>%
pull(value)
value_latest <- df %>%
filter(date == max(df$date)) %>%
pull(value)
change_since_2019 <- value_latest - value_2019
df %>%
mutate(change_since_2019 = ifelse(date == max(df$date), change_since_2019, NA))
})
states_data_list <- map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
value_2019 <- df %>%
filter(date == as.Date("2019-01-01")) %>%
pull(value)
value_latest <- df %>%
filter(date == max(df$date)) %>%
pull(value)
change_since_2019 <- value_latest - value_2019
df %>%
mutate(change_since_2019 = ifelse(date == max(df$date), change_since_2019, NA))
})
states_data_list <- map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
value_2019 <- df %>%
filter(date == as.Date("2019-01-01")) %>%
pull(value)
value_latest <- df %>%
filter(date == max(df$date)) %>%
pull(value)
change_since_2019 <- value_latest - value_2019
df %>%
mutate(change_since_2019 = ifelse(date == max(df$date), change_since_2019, NA))
})
states_list
function(st)
map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
value_2019 <- df %>%
filter(date == as.Date("2019-01-01")) %>%
pull(value)
value_latest <- df %>%
filter(date == max(df$date)) %>%
pull(value)
change_since_2019 <- value_latest - value_2019
df %>%
mutate(change_since_2019 = ifelse(date == max(df$date), change_since_2019, NA))
})
map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
value_2019 <- df %>%
filter(date == as.Date("2019-01-01")) %>%
pull(value)
value_latest <- df %>%
filter(date == max(df$date)) %>%
pull(value)
change_since_2019 <- value_latest - value_2019
df %>%
mutate(change_since_2019 = ifelse(date == max(df$date), change_since_2019, NA))
})
map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
value_2019 <- df %>%
filter(date == as.Date("2019-01-01")) %>%
pull(value)
value_latest <- df %>%
filter(date == max(df$date)) %>%
pull(value)
change_since_2019 <- value_latest - value_2019
df %>%
mutate(change_since_2019 = ifelse(date == max(df$date), change_since_2019, NA))
})
map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
value_2019 <- df %>%
filter(date == as.Date("2019-01-01")) %>%
pull(value)
value_latest <- df %>%
filter(date == max(df$date)) %>%
pull(value)
change_since_2019 <- value_latest - value_2019
df %>%
mutate(change_since_2019 = ifelse(date == max(df$date), change_since_2019, NA))
})
map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
value_2019 <- df %>%
filter(date == as.Date("2019-01-01")) %>%
pull(value)
value_latest <- df %>%
filter(date == max(df$date)) %>%
pull(value)
change_since_2019 <- value_latest - value_2019
df %>%
mutate(change_since_2019 = ifelse(date == max(df$date), change_since_2019, NA))
})
map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
value_2019 <- df %>%
filter(date == as.Date("2019-01-01")) %>%
pull(value)
value_latest <- df %>%
filter(date == max(df$date)) %>%
pull(value)
change_since_2019 <- value_latest - value_2019
df %>%
mutate(change_since_2019 = ifelse(date == max(df$date), change_since_2019, NA))
})
fredr(series_id = paste0("UT", "RVAC"), observation_start = as.Date("1986-01-01"))
map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
change_since_2019_df <- df %>%
filter(date %in% c(as.Date("2019-01-01"), max(df$date))) %>%
summarize(change_since_2019 = diff(value))
df %>%
left_join(change_since_2019_df, by = character()) %>%
mutate(change_since_2019 = ifelse(date == max(df$date), change_since_2019, NA))
})
fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01"))
states_data_list <- map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
value_2019 <- df %>%
filter(date == as.Date("2019-01-01")) %>%
summarise(value_2019 = first(value)) %>%
pull(value_2019)
value_latest <- df %>%
filter(date == max(date)) %>%
summarise(value_latest = first(value)) %>%
pull(value_latest)
change_since_2019 <- value_latest - value_2019
df %>%
mutate(change_since_2019 = ifelse(date == max(date), change_since_2019, NA))
})
states_data_list <- map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
value_2019 <- df %>%
filter(date == as.Date("2019-01-01")) %>%
summarise(value_2019 = first(value)) %>%
.$value_2019
value_latest <- df %>%
filter(date == max(date)) %>%
summarise(value_latest = first(value)) %>%
.$value_latest
change_since_2019 <- value_latest - value_2019
df %>%
mutate(change_since_2019 = ifelse(date == max(date), change_since_2019, NA))
})
states_list <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA",
"HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD",
"MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ",
"NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC",
"SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY")
# Main code
library(purrr)
library(dplyr)
states_data_list <- map(states_list, function(st) {
df <- fredr(series_id = paste0(st, "RVAC"), observation_start = as.Date("1986-01-01")) %>%
mutate(name = st)
value_2019 <- df %>%
filter(date == as.Date("2019-01-01")) %>%
summarise(value_2019 = first(value)) %>%
.$value_2019
value_latest <- df %>%
filter(date == max(date)) %>%
summarise(value_latest = first(value)) %>%
.$value_latest
change_since_2019 <- value_latest - value_2019
df %>%
mutate(change_since_2019 = ifelse(date == max(date), change_since_2019, NA))
})
