annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = 0-(.3*7.5), ymax = 0) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports-imports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports-imports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports-imports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.5, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,2.50,5.00,7.50,10), limits = c(-7.5,10), expand = c(0,0)) +
ggtitle("Net Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically Since 2022, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.38,.7)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = 0-(.3*7.5), ymax = 0) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports-imports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports-imports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports-imports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.5, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,2.50,5.00,7.50,10), limits = c(-7.5,10), expand = c(0,0)) +
ggtitle("Net Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically Since 2022, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.38,.7)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = -7.5-(.3*17.5), ymax = -7.5) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports-imports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports-imports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports-imports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.5, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,2.50,5.00,7.50,10), limits = c(-7.5,10), expand = c(0,0)) +
ggtitle("Net Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC, Destatis, and E-Stat Japan Data", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically Since 2022, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.38,.7)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = -7.5-(.3*17.5), ymax = -7.5) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports-imports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports-imports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports-imports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.5, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,2.50,5.00,7.50,10), limits = c(-7.5,10), expand = c(0,0)) +
ggtitle("Net Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC, Destatis, and E-Stat Japan Data", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.38,.7)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = -7.5-(.3*17.5), ymax = -7.5) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports-imports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports-imports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports-imports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.5, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,2.50,5.00,7.50,10), limits = c(-7.5,10), expand = c(0,0)) +
ggtitle("Net Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC, Destatis, and E-Stat Japan Data", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.2,.5)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = -7.5-(.3*17.5), ymax = -7.5) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports-imports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports-imports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports-imports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.5, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,2.50,5.00,7.50,10), limits = c(-7.5,10), expand = c(0,0)) +
ggtitle("Net Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC, Destatis, and E-Stat Japan Data", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.2,.6)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = -7.5-(.3*17.5), ymax = -7.5) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.5, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,2.50,5.00,7.50,10), limits = c(-7.5,10), expand = c(0,0)) +
ggtitle("Net Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC, Destatis, and E-Stat Japan Data", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.2,.6)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = -7.5-(.3*17.5), ymax = -7.5) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.5, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,2.50,5.00,7.50,10), limits = c(-7.5,15), expand = c(0,0)) +
ggtitle("Net Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC, Destatis, and E-Stat Japan Data", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.2,.6)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = -7.5-(.3*17.5), ymax = -7.5) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.5, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,2.50,5.00,7.50,10), limits = c(-7.5,25), expand = c(0,0)) +
ggtitle("Net Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC, Destatis, and E-Stat Japan Data", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.2,.6)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = -7.5-(.3*17.5), ymax = -7.5) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
View(GERMANY_CAR_NET_EXP)
ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.5, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,2.50,5.00,7.50,10), limits = c(0,15), expand = c(0,0)) +
ggtitle("Net Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC, Destatis, and E-Stat Japan Data", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.2,.6)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = -7.5-(.3*17.5), ymax = -7.5) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.5, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,2.50,5.00,7.50,10), limits = c(0,20), expand = c(0,0)) +
ggtitle("Net Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC, Destatis, and E-Stat Japan Data", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.2,.6)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = -7.5-(.3*17.5), ymax = -7.5) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 1, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,5.00,10,15,20), limits = c(0,20), expand = c(0,0)) +
ggtitle("Gross Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC, Destatis, and E-Stat Japan Data", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.2,.6)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = 0-(.3*20), ymax = 0) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
IP_9DIGIT_BULK <- retrieve_data(tablename = "42131BV203", genesis=c(db='de'))
IP_EV_EURO <- IP_9DIGIT_BULK %>%
subset(GP19A9 %in% c("GP19-291024500","GP19-291024300")) %>%
mutate(GP19A9 = gsub("GP19-291024500", "Battery Electric Vehicles",GP19A9)) %>%
mutate(GP19A9 = gsub("GP19-291024300", "Plug-in Hybrids",GP19A9)) %>%
transmute(category = factor(GP19A9, levels = c("Plug-in Hybrids","Battery Electric Vehicles")), value = PRODAW_val, date = as.Date(as.yearqtr(paste0(JAHR, '-', gsub("QUART", "", QUARTG)), format = "%Y-%q")))
IP_EV_NUMBER <- IP_9DIGIT_BULK %>%
subset(GP19A9 %in% c("GP19-291024500","GP19-291024300")) %>%
mutate(GP19A9 = gsub("GP19-291024500", "Battery Electric Vehicles",GP19A9)) %>%
mutate(GP19A9 = gsub("GP19-291024300", "Plug-in Hybrids",GP19A9)) %>%
transmute(category = factor(GP19A9, levels = c("Plug-in Hybrids","Battery Electric Vehicles")), value = PRO008_val, date = as.Date(as.yearqtr(paste0(JAHR, '-', gsub("QUART", "", QUARTG)), format = "%Y-%q")))
EV_STACKED_EURO_graph <- ggplot(data = IP_EV, aes(x = date, y = value/1000000000, fill = category)) +
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_bar(stat = "identity", position = "stack", color = NA) +
ylab("Euros") +
ggtitle("The German EV Surge") +
scale_y_continuous(labels = scales::dollar_format(accuracy = 1, suffix = "B", prefix = "€"), breaks = c(0,5,10,15), limits = c(0,15), expand = c(0,0)) +
labs(caption = "Graph created by @JosephPolitano using DeStatis data", subtitle = "The Value of German EV Output is Rapidly Growing as the Industry Retools") +
theme_apricitas + theme(legend.position = c(.425,.85)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_fill_manual(name= "Value of German Quarterly Production",values = c("#FFE98F","#00A99D","#EE6055","#A7ACD9","#9A348E","#3083DC","#6A4C93"), breaks = c("Battery Electric Vehicles","Plug-in Hybrids")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2019-01-01")-(.1861*(today()-as.Date("2019-01-01"))), xmax = as.Date("2019-01-01")-(0.049*(today()-as.Date("2019-01-01"))), ymin = 0-(.3*15), ymax = 0) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
EV_STACKED_NUMBER_graph <- ggplot(data = IP_EV, aes(x = date, y = value/1000, fill = category)) +
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_bar(stat = "identity", position = "stack", color = NA) +
ylab("Thousands of Vehicles") +
ggtitle("The German EV Surge") +
scale_y_continuous(labels = scales::number_format(accuracy = 1, suffix = "k"), breaks = c(0,200,400), limits = c(0,400), expand = c(0,0)) +
labs(caption = "Graph created by @JosephPolitano using DeStatis data", subtitle = "The Number of German EVs Produced is Rapidly Growing as the Industry Retools") +
theme_apricitas + theme(legend.position = c(.425,.85)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_fill_manual(name= "German Quarterly Production, Thousands of Vehicles",values = c("#FFE98F","#00A99D","#EE6055","#A7ACD9","#9A348E","#3083DC","#6A4C93"), breaks = c("Battery Electric Vehicles","Plug-in Hybrids")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2019-01-01")-(.1861*(today()-as.Date("2019-01-01"))), xmax = as.Date("2019-01-01")-(0.049*(today()-as.Date("2019-01-01"))), ymin = 0-(.3*400), ymax = 0) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggplot(data = IP_EV_NUMBER, aes(x = date, y = value/1000, fill = category)) +
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_bar(stat = "identity", position = "stack", color = NA) +
ylab("Thousands of Vehicles") +
ggtitle("The German EV Surge") +
scale_y_continuous(labels = scales::number_format(accuracy = 1, suffix = "k"), breaks = c(0,200,400), limits = c(0,400), expand = c(0,0)) +
labs(caption = "Graph created by @JosephPolitano using DeStatis data", subtitle = "The Number of German EVs Produced is Rapidly Growing as the Industry Retools") +
theme_apricitas + theme(legend.position = c(.425,.85)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_fill_manual(name= "German Quarterly Production, Thousands of Vehicles",values = c("#FFE98F","#00A99D","#EE6055","#A7ACD9","#9A348E","#3083DC","#6A4C93"), breaks = c("Battery Electric Vehicles","Plug-in Hybrids")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2019-01-01")-(.1861*(today()-as.Date("2019-01-01"))), xmax = as.Date("2019-01-01")-(0.049*(today()-as.Date("2019-01-01"))), ymin = 0-(.3*400), ymax = 0) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
IND_PRO_NEV <- statscnQueryData('A02092W',dbcode='hgyd',lang = "en", rowcode = "sj", colcode = "zb")
View(IND_PRO_NEV)
NET_EXPORTS_GRAPH <- ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports-imports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports-imports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports-imports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.5, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,2.50,5.00,7.50,10), limits = c(-7.5,10), expand = c(0,0)) +
ggtitle("Net Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC, Destatis, and E-Stat Japan Data", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.2,.6)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = -7.5-(.3*17.5), ymax = -7.5) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
GROSS_EXPORTS_GRAPH <- ggplot() + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_line(data= CHINA_NET_EXPORTS, aes(x=date,y=(exports)/1000000000,color= "China"), size = 1.25) +
geom_line(data= GERMANY_CAR_NET_EXP, aes(x=date,y=(exports)/1000000,color= "Germany"), size = 1.25) +
geom_line(data= JPN_CAR_NET_EXP, aes(x=date,y=((exports)/value)/1000000,color= "Japan"), size = 1.25) +
xlab("Date") +
ylab("Billions of Dollars, Monthly") +
scale_y_continuous(labels = scales::comma_format(accuracy = 1, suffix = "B", prefix = "$"), breaks = c(-7.5,-5,-2.5,0,5.00,10,15,20), limits = c(0,20), expand = c(0,0)) +
ggtitle("Gross Passenger Vehicle Exports") +
labs(caption = "Graph created by @JosephPolitano using GACC, Destatis, and E-Stat Japan Data", subtitle = "New Chinese Vehicle Exports Have Risen Dramatically, But Are Still Below Germany/Japan") +
theme_apricitas + theme(legend.position = c(.2,.6)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_color_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#3083DC","#FF8E72","#A7ACD9","#6A4C93")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = 0-(.3*20), ymax = 0) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggsave(dpi = "retina",plot = NET_EXPORTS_GRAPH, "Net Exports Graph.png", type = "cairo-png", width = 9.02, height = 5.76, units = "in")
ggsave(dpi = "retina",plot = GROSS_EXPORTS_GRAPH, "Gross Exports Graph.png", type = "cairo-png", width = 9.02, height = 5.76, units = "in")
setwd("~/GitHub/Apricitas/Repeat Use Charts/Employment Releases/040723")
AL <- fredr(series_id = "ALNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Alabama")
AK <- fredr(series_id = "AKNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Alaska")
AZ <- fredr(series_id = "AZNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Arizona")
AR <- fredr(series_id = "ARNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Arkansas")
CA <- fredr(series_id = "CANA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "California")
CO <- fredr(series_id = "CONA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Colorado")
CT <- fredr(series_id = "CTNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Connecticut")
DE <- fredr(series_id = "DENA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Delaware")
DC <- fredr(series_id = "DCNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "District of Columbia")
FL <- fredr(series_id = "FLNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Florida")
GA <- fredr(series_id = "GANA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Georgia")
HI <- fredr(series_id = "HINA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Hawaii")
ID <- fredr(series_id = "IDNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Idaho")
IL <- fredr(series_id = "ILNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Illinois")
IN <- fredr(series_id = "INNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Indiana")
IA <- fredr(series_id = "IANA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Iowa")
KS <- fredr(series_id = "KSNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Kansas")
KY <- fredr(series_id = "KYNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Kentucky")
LA <- fredr(series_id = "LANA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Louisiana")
ME <- fredr(series_id = "MENA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Maine")
MD <- fredr(series_id = "MDNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Maryland")
MA <- fredr(series_id = "MANA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Massachusetts")
MI <- fredr(series_id = "MINA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Michigan")
MN <- fredr(series_id = "MNNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Minnesota")
MS <- fredr(series_id = "MSNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Mississippi")
MO <- fredr(series_id = "MONA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Missouri")
MT <- fredr(series_id = "MTNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Montana")
NE <- fredr(series_id = "NENA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Nebraska")
NV <- fredr(series_id = "NVNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Nevada")
NH <- fredr(series_id = "NHNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "New Hampshire")
NJ <- fredr(series_id = "NJNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "New Jersey")
NM <- fredr(series_id = "NMNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "New Mexico")
NY <- fredr(series_id = "NYNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "New York")
NC <- fredr(series_id = "NCNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "North Carolina")
ND <- fredr(series_id = "NDNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "North Dakota")
OH <- fredr(series_id = "OHNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Ohio")
OK <- fredr(series_id = "OKNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Oklahoma")
OR <- fredr(series_id = "ORNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Oregon")
PA <- fredr(series_id = "PANA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Pennsylvania")
RI <- fredr(series_id = "RINA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Rhode Island")
SC <- fredr(series_id = "SCNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "South Carolina")
SD <- fredr(series_id = "SDNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "South Dakota")
TN <- fredr(series_id = "TNNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Tennessee")
TX <- fredr(series_id = "TXNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Texas")
UT <- fredr(series_id = "UTNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Utah")
VT <- fredr(series_id = "VTNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Vermont")
VA <- fredr(series_id = "VANA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Virginia")
WA <- fredr(series_id = "WANA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Washington")
WV <- fredr(series_id = "WVNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "West Virginia")
WI <- fredr(series_id = "WINA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Wisconsin")
WY <- fredr(series_id = "WYNA",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Wyoming")
PR <- fredr(series_id = "SMS72000000000000001",observation_start = as.Date("2020-01-01")) %>%
mutate(series_id = "PR") %>%
mutate(name = "Puerto Rico")
VI <- fredr(series_id = "SMS78000000000000001",observation_start = as.Date("2020-01-01")) %>%
mutate(series_id = "VI") %>%
mutate(name = "Virgin Islands")
JOB_GROWTH <- rbind(AL, AK, AZ, AR, CA, CO, CT, DE, DC, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY, PR, VI) %>%
select(date, value, name, series_id) %>%
arrange(name, date) %>%
group_by(name) %>%
mutate(CAGR = (value / first(value)) ^ (1 / ((row_number() - 1) / 12)) - 1) %>%
mutate(Growth = ((value - first(value)) / first(value))) %>%
filter(date == max(date))
devtools::install_github("UrbanInstitute/urbnmapr")
library(urbnmapr)
states_job_growth <- get_urbn_map("territories_states", sf = TRUE) %>%
st_as_sf()
states_job_growth <- states_job_growth %>%
mutate(name = state_name)
states_job_growth <- left_join(states_job_growth, JOB_GROWTH, by = "name") %>%
drop_na()
JOB_GROWTH_STATE <- states_job_growth %>%
mutate(Growth_bucket = cut(Growth, breaks = c(-Inf, 0, 0.015, 0.03, 0.045, 0.06, Inf), labels = c("<0", "0-0.015", "0.015-0.03", "0.03-0.045", "0.045-0.06","0.06+"))) %>%
ggplot(aes(fill = Growth_bucket)) +
geom_sf(color = NA) +
geom_sf(data = states_job_growth, color = "black", fill = NA, lwd = 0.65) + # Black borders for states
scale_fill_manual(values = c("#EE6055","#F5B041","#FFE98F","#AFEEEE","#AED581", "#00A99D","#3083DC"),
na.value = "grey50",
guide = "legend",
labels = c("<0%", "0-1.5%", "1.5-3%", "3-4.5%", "4.5-6%","6%+")) +
ggtitle("     Growth in Nonfarm Payrolls Since Jan 2020") +
theme(plot.title = element_text(size = 24)) +
labs(caption = "Graph created by @JosephPolitano using BLS data") +
labs(fill = NULL) +
theme_apricitas + theme(legend.position = "right", panel.grid.major=element_blank(), axis.line = element_blank(), axis.text.x = element_blank(),axis.text.y = element_blank(),plot.margin= grid::unit(c(0, 0, 0, 0), "in"), legend.key = element_blank())
ggsave(dpi = "retina",plot = JOB_GROWTH_STATE, "Job Growth By State Map.png", type = "cairo-png", width = 9.02, height = 5.76, units = "in") #cairo gets rid of anti aliasing
PAYEMS_2020 <- fredr(series_id = "PAYEMS",observation_start = as.Date("2020-01-01"),realtime_start = NULL, realtime_end = NULL)%>%
mutate(name = "Rest of America")
TX_FL_US_PAYEMS <- rbind(FL,TX,PAYEMS_2020) %>%
select(date, value, name) %>%
group_by(name) %>%
mutate(value = (value - first(value))) %>%
pivot_wider() %>%
mutate(`Rest of America` = `Rest of America`-Texas-Florida) %>%
drop_na() %>%
pivot_longer(cols = Florida:`Rest of America`) %>%
mutate(name = factor(name, levels = rev(c("Texas", "Florida", "Rest of America"))))
TX_FL_US_PAYEMS_graph <- ggplot(data = TX_FL_US_PAYEMS, aes(x = date, y = value/1000, fill = name)) + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_bar(stat = "identity", position = "stack", color = NA) +
xlab("Date") +
ylab("Change Since Jan 2020, Millions of Jobs") +
scale_y_continuous(labels = scales::comma_format(accuracy = 1, suffix = "M"), breaks = c(-20,-15,-10,-5,0,5), limits = c(-22,5), expand = c(0,0)) +
ggtitle("The State of US Job Growth") +
labs(caption = "Graph created by @JosephPolitano using BLS data", subtitle = "Texas and Florida Have Created the Most New Jobs Since the Pandemic") +
theme_apricitas + theme(legend.position = c(.625,.25)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_fill_manual(name= "Nonfarm Payrolls, Change Since Jan 2020",values = c("#FFE98F","#EE6055","#00A99D","#9A348E","#A7ACD9","#3083DC","#6A4C93"), breaks = c("Texas","Florida","Rest of America")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2020-01-01")-(.1861*(today()-as.Date("2020-01-01"))), xmax = as.Date("2020-01-01")-(0.049*(today()-as.Date("2020-01-01"))), ymin = -22-(.3*27), ymax = -22) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
ggsave(dpi = "retina",plot = TX_FL_US_PAYEMS_graph, "TX FL Growth Graph.png", type = "cairo-png", width = 9.02, height = 5.76, units = "in") #cairo gets rid of anti aliasing
#Adding Puerto Rico
JOB_GROWTH <- JOB_GROWTH %>%
mutate(series_id = gsub("NA","",series_id)) %>%
.[order(.$Growth), ] %>%
mutate(series_id = factor(series_id, levels = .$series_id))
JOB_GROWTH_STATE_BAR_GRAPH <- ggplot(data = JOB_GROWTH, aes(x = series_id, y = Growth, fill = "Nonfarm Payrolls Growth Since Jan 2020")) +
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +#plotting Deposits, Insured and Uninsured
geom_bar(stat = "identity", position = "dodge", color = NA) +
xlab("State") +
ylab("Percent") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), breaks = c(-0.05,0,0.05,0.10), limits = c(-.12,.11), expand = c(0,0)) +
ggtitle("Job Growth By State/Territory") +
labs(caption = "Graph created by @JosephPolitano using US Census data", subtitle = "Most States Have Now Seen Payrolls Fully Recover From the Pandemic") +
theme_apricitas + theme(legend.position = c(.67,.25)) +#, axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_fill_manual(name= NULL,values = c("#FFE98F","#00A99D","#EE6055","#A7ACD9","#9A348E","#3083DC","#6A4C93")) +
theme(axis.text.x = element_text(size = 7))
ggsave(dpi = "retina",plot = JOB_GROWTH_STATE_BAR_GRAPH, "Growth State Bar Graph.png", type = "cairo-png", width = 9.02, height = 5.76, units = "in") #cairo gets rid of anti aliasing
JOB_GROWTH_STATE_BAR_GRAPH
pacman::p_load(seasonal,eurostat,restatapi,bea.R,sidrar,htmltools,devtools,onsr,dplyr,seasonal,janitor,openxlsx,dplyr,BOJ,readxl,RcppRoll,DSSAT,tidyr,eia,cli,remotes,magick,cowplot,knitr,ghostscript,png,httr,grid,usethis,pacman,rio,ggplot2,ggthemes,quantmod,dplyr,data.table,lubridate,forecast,gifski,av,tidyr,gganimate,zoo,RCurl,Cairo,datetime,stringr,pollster,tidyquant,hrbrthemes,plotly,fredr)
devtools::install_github("warint/statcanR")
library(statcanR)
devtools::install_github("rOpenGov/eurostat")
CANADA_INDPRO <- statcan_data("36-10-0434-04", "eng") %>%
subset(`North American Industry Classification System (NAICS)`=="Motor vehicle manufacturing [3361]") %>%
subset(`Prices`=="Chained (2012) dollars") %>%
subset(`Seasonal adjustment`=="Seasonally adjusted at annual rates") %>%
subset(REF_DATE >= as.Date("2018-01-01"))
US_INDPRO <- fredr(series_id = "IPG3361S",observation_start = as.Date("2018-01-01"),realtime_start = NULL, realtime_end = NULL, aggregation_method = "m")
ggplot() + #plotting components of annual inflation
geom_line(data = CANADA_INDPRO, aes(x = REF_DATE, y = VALUE/VALUE[1]*100, color = "Canada"), size = 1.25) +
geom_line(data = US_INDPRO, aes(x = date, y = value/value[1]*100, color = "United States"), size = 1.25) +
xlab("Date") +
scale_y_continuous(labels = scales::number_format(accuracy = 1),limits = c(0,130), breaks = c(0,25,50,75,100,125,150), expand = c(0,0)) +
ylab("Index, Jan 2018=100") +
ggtitle("Canada, Chips, and the Car Shortage") +
labs(caption = "Graph created by @JosephPolitano using Federal Reserve and Statistics Canada data",subtitle = "Canadian Auto Production Has Suffered More Thanks to The Chip Shortage & EV Retooling") +
theme_apricitas + theme(legend.position = c(.22,.25)) +
scale_color_manual(name= "Industrial Production of Motor Vehicles",values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#A7ACD9","#3083DC")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = 0-(.3*130), ymax = 0) +
coord_cartesian(clip = "off")
ggplot() + #plotting components of annual inflation
geom_line(data = CANADA_INDPRO, aes(x = REF_DATE, y = VALUE/VALUE[1]*100, color = "Canada"), size = 1.25) +
geom_line(data = US_INDPRO, aes(x = date, y = value/value[1]*100, color = "United States"), size = 1.25) +
xlab("Date") +
scale_y_continuous(labels = scales::number_format(accuracy = 1),limits = c(0,130), breaks = c(0,25,50,75,100,125,150), expand = c(0,0)) +
ylab("Index, Jan 2018=100") +
ggtitle("Canada, Chips, and the Car Shortage") +
labs(caption = "Graph created by @JosephPolitano using Federal Reserve and Statistics Canada data",subtitle = "Canadian Auto Production Has Suffered More Thanks to The Chip Shortage & EV Retooling") +
theme_apricitas + theme(legend.position = c(.62,.25)) +
scale_color_manual(name= "Industrial Production of Motor Vehicles",values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#A7ACD9","#3083DC")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = 0-(.3*130), ymax = 0) +
coord_cartesian(clip = "off")
ggplot() + #plotting components of annual inflation
geom_line(data = CANADA_INDPRO, aes(x = REF_DATE, y = VALUE/VALUE[1]*100, color = "Canada"), size = 1.25) +
geom_line(data = US_INDPRO, aes(x = date, y = value/value[1]*100, color = "United States"), size = 1.25) +
xlab("Date") +
scale_y_continuous(labels = scales::number_format(accuracy = 1),limits = c(0,130), breaks = c(0,25,50,75,100,125,150), expand = c(0,0)) +
ylab("Index, Jan 2018=100") +
ggtitle("Canada, Chips, and the Car Shortage") +
labs(caption = "Graph created by @JosephPolitano using Federal Reserve and Statistics Canada data",subtitle = "Canadian Auto Production Has Suffered More Thanks to The Chip Shortage & EV Retooling") +
theme_apricitas + theme(legend.position = c(.82,.25)) +
scale_color_manual(name= "Industrial Production of Motor Vehicles",values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#A7ACD9","#3083DC")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = 0-(.3*130), ymax = 0) +
coord_cartesian(clip = "off")
ggplot() + #plotting components of annual inflation
geom_line(data = CANADA_INDPRO, aes(x = REF_DATE, y = VALUE/VALUE[1]*100, color = "Canada"), size = 1.25) +
geom_line(data = US_INDPRO, aes(x = date, y = value/value[1]*100, color = "United States"), size = 1.25) +
xlab("Date") +
scale_y_continuous(labels = scales::number_format(accuracy = 1),limits = c(0,130), breaks = c(0,25,50,75,100,125,150), expand = c(0,0)) +
ylab("Index, Jan 2018=100") +
ggtitle("Canada, Chips, and the Car Shortage") +
labs(caption = "Graph created by @JosephPolitano using Federal Reserve and Statistics Canada data",subtitle = "Canadian Auto Production Has Suffered More Thanks to The Chip Shortage & EV Retooling") +
theme_apricitas + theme(legend.position = c(.62,.2)) +
scale_color_manual(name= "Industrial Production of Motor Vehicles",values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#A7ACD9","#3083DC")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = 0-(.3*130), ymax = 0) +
coord_cartesian(clip = "off")
ggplot() + #plotting components of annual inflation
geom_line(data = CANADA_INDPRO, aes(x = REF_DATE, y = VALUE/VALUE[1]*100, color = "Canada"), size = 1.25) +
geom_line(data = US_INDPRO, aes(x = date, y = value/value[1]*100, color = "United States"), size = 1.25) +
xlab("Date") +
scale_y_continuous(labels = scales::number_format(accuracy = 1),limits = c(0,130), breaks = c(0,25,50,75,100,125,150), expand = c(0,0)) +
ylab("Index, Jan 2018=100") +
ggtitle("Canada, Chips, and the Car Shortage") +
labs(caption = "Graph created by @JosephPolitano using Federal Reserve and Statistics Canada data",subtitle = "Canadian Auto Production Has Suffered More Thanks to The Chip Shortage & EV Retooling") +
theme_apricitas + theme(legend.position = c(.72,.2)) +
scale_color_manual(name= "Industrial Production of Motor Vehicles",values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#A7ACD9","#3083DC")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = 0-(.3*130), ymax = 0) +
coord_cartesian(clip = "off")
US_CANADA_INDPRO_graph <- ggplot() + #plotting components of annual inflation
geom_line(data = CANADA_INDPRO, aes(x = REF_DATE, y = VALUE/VALUE[1]*100, color = "Canada"), size = 1.25) +
geom_line(data = US_INDPRO, aes(x = date, y = value/value[1]*100, color = "United States"), size = 1.25) +
xlab("Date") +
scale_y_continuous(labels = scales::number_format(accuracy = 1),limits = c(0,130), breaks = c(0,25,50,75,100,125,150), expand = c(0,0)) +
ylab("Index, Jan 2018=100") +
ggtitle("Canada, Chips, and the Car Shortage") +
labs(caption = "Graph created by @JosephPolitano using Federal Reserve and Statistics Canada data",subtitle = "Canadian Auto Production Has Suffered More Thanks to The Chip Shortage & EV Retooling") +
theme_apricitas + theme(legend.position = c(.72,.2)) +
scale_color_manual(name= "Industrial Production of Motor Vehicles",values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#A7ACD9","#3083DC")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2018-01-01")-(.1861*(today()-as.Date("2018-01-01"))), xmax = as.Date("2018-01-01")-(0.049*(today()-as.Date("2018-01-01"))), ymin = 0-(.3*130), ymax = 0) +
coord_cartesian(clip = "off")
setwd("~/GitHub/Apricitas/Global Car Shortage")
ggsave(dpi = "retina",plot = US_CANADA_INDPRO_graph, "US Canada Indpro.png", type = "cairo-png", width = 9.02, height = 5.76, units = "in")
