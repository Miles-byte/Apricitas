mutate(date = as.Date(as.yearmon(paste(periodName, year), "%b %Y")))
GAS_EXPEND_MEDIAN2 <- bls_api("CXUGASOILLB0104M", startyear = 2004, endyear = 2020, Sys.getenv("BLS_KEY")) %>%
mutate(date = as.Date(as.yearmon(paste(periodName, year), "%b %Y"))) %>%
subset(select = -latest)
GAS_EXPEND_MEDIAN <- rbind(GAS_EXPEND_MEDIAN2,GAS_EXPEND_MEDIAN1)
TOTAL_EXPEND_MEDIAN1 <- bls_api("CXUTOTALEXPLB0104M", startyear = 1984, endyear = 2003, Sys.getenv("BLS_KEY")) %>%
mutate(date = as.Date(as.yearmon(paste(periodName, year), "%b %Y")))
TOTAL_EXPEND_MEDIAN2 <- bls_api("CXUTOTALEXPLB0104M", startyear = 2004, endyear = 2020, Sys.getenv("BLS_KEY")) %>%
mutate(date = as.Date(as.yearmon(paste(periodName, year), "%b %Y")))  %>%
subset(select = -latest)
TOTAL_EXPEND_MEDIAN <- rbind(TOTAL_EXPEND_MEDIAN2,TOTAL_EXPEND_MEDIAN1)
#merging total and gas expenditures
GAS_TOTAL_MERGE_MEDIAN <- merge(GAS_EXPEND_MEDIAN, TOTAL_EXPEND_MEDIAN, by = "year")
GAS_TOTAL_MERGE_MEDIAN <- subset(GAS_TOTAL_MERGE_MEDIAN,select = c(year, value.x, value.y))
colnames(GAS_TOTAL_MERGE_MEDIAN) <- c("year", "gas", "total")
GAS_TOTAL_MERGE_MEDIAN$year <- ymd(GAS_TOTAL_MERGE_MEDIAN$year, truncated = 2L)
XOP <- tq_get("XOP", from = "2006-07-01") #downloading XOP returns
SPY <- tq_get("SPY", from = "2006-07-01") #downloading SPY returns
WTI <- tq_get("CL=F", from = "2006-07-01")
Baker_Hughes <- read.csv("https://raw.githubusercontent.com/Miles-byte/Apricitas/main/Why%20are%20Gas%20Prices%20So%20High/Baker_Hughes.csv")
Baker_Hughes$Date <- as.Date(Baker_Hughes$Date)
Baker_Hughes$RIG_COUNT <- gsub(",","",Baker_Hughes$RIG_COUNT)
Baker_Hughes$RIG_COUNT <- as.numeric(Baker_Hughes$RIG_COUNT)
Baker_Hughes <- subset(Baker_Hughes, Date > "2006-07-05")
Petrol_Profits <- read.csv("https://raw.githubusercontent.com/Miles-byte/Apricitas/main/Why%20are%20Gas%20Prices%20So%20High/Petrol_Profits.csv")
Petrol_Profits$Date <- as.Date(Petrol_Profits$Date)
Capital_Discipline <- data.frame(answer = c("Capital Discipline","Other","ESG Issues","Lack of Access to Financing","Government Regulations"), percent = c(.59,.15,.11,.08,.06))
Capital_Discipline$answer <- factor(Capital_Discipline$answer, levels = c("Government Regulations","Lack of Access to Financing","ESG Issues","Other","Capital Discipline"), ordered = TRUE)
#modeled crude production and real production data
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
Crude_ProductionWeekly <- as.data.frame(Crude_ProductionWeekly$data)
Crude_ProductionMonthly <- eia_series("PET.MCRFPUS2.M", start = "2019")
Crude_ProductionMonthly <- as.data.frame(Crude_ProductionMonthly$data)
Crude_ProductionMonthly <- eia_series("PET.MCRFPUS2.M", start = "2019")
pacman::p_load(jsonlite,cli,remotes,magick,cowplot,knitr,ghostscript,png,httr,grid,usethis,pacman,rio,ggplot2,ggthemes,quantmod,dplyr,data.table,lubridate,forecast,gifski,av,tidyr,gganimate,zoo,RCurl,Cairo,datetime,stringr,pollster,tidyquant,hrbrthemes,plotly,fredr)
#crude, gas, and diesel prices
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
OPEC_Crude_Production <- eia_series("STEO.PAPR_OPEC.M", start = "2019", end = "2026")
library(eia)
pacman::p_load(stringi,jsonlite,cli,remotes,magick,cowplot,knitr,ghostscript,png,httr,grid,usethis,pacman,rio,ggplot2,ggthemes,quantmod,dplyr,data.table,lubridate,forecast,gifski,av,tidyr,gganimate,zoo,RCurl,Cairo,datetime,stringr,pollster,tidyquant,hrbrthemes,plotly,fredr)
OPEC_Crude_Production <- eia_series("STEO.PAPR_OPEC.M", start = "2019", end = "2026")
eia_series("STEO.PAPR_OPEC.M", start = "2019", end = "2026")
eia_series("STEO.PAPR_OPEC.M", start = "2019", end = "2026")
OPEC_Crude_Production <- eia_series("STEO.PAPR_OPEC.M", start = "2019", end = "2026")
#STEO Crude Production, SPR Drawdowns and Forecasts
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_SPR_Withdrawls <- eia_series("STEO.COSQ_DRAW.M", start = "2019", end = "2026")
p_unload(all)  # Remove all packages using the package manager
# Clear console
cat("\014")  # ctrl+L
rm(list = ls())
dev.off()
pacman::p_load(stringi,jsonlite,cli,remotes,magick,cowplot,knitr,ghostscript,png,httr,grid,usethis,pacman,rio,ggplot2,ggthemes,quantmod,dplyr,data.table,lubridate,forecast,gifski,av,tidyr,gganimate,zoo,RCurl,Cairo,datetime,stringr,pollster,tidyquant,hrbrthemes,plotly,fredr)
install_github("keberwein/blscrapeR")
library(blscrapeR)
pacman::p_load(eia)
library(eia)
theme_apricitas <- theme_ft_rc() + #setting the "apricitas" custom theme that I use for my blog
theme(axis.line = element_line(colour = "white"),legend.position = c(.90,.90),legend.text = element_text(size = 14, color = "white"), legend.title =element_text(size = 14),plot.title = element_text(size = 28, color = "white")) #using a modified FT theme and white axis lines for my "theme_apricitas"
apricitas_logo <- image_read("https://github.com/Miles-byte/Apricitas/blob/main/Logo.png?raw=true") #downloading and rasterizing my "Apricitas" blog logo from github
apricitas_logo_rast <- rasterGrob(apricitas_logo, interpolate=TRUE)
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
Crude_ProductionWeekly <- as.data.frame(Crude_ProductionWeekly$data)
#modeled crude production and real production data
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
library(eia)
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
pacman::p_load(stringi,jsonlite,cli,remotes,magick,cowplot,knitr,ghostscript,png,httr,grid,usethis,pacman,rio,ggplot2,ggthemes,quantmod,dplyr,data.table,lubridate,forecast,gifski,av,tidyr,gganimate,zoo,RCurl,Cairo,datetime,stringr,pollster,tidyquant,hrbrthemes,plotly,fredr)
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
p_unload(all)  # Remove all packages using the package manager
# Clear console
cat("\014")  # ctrl+L
rm(list = ls())
dev.off()
library(eia)
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = today())
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = 2022)
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = 2022)
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = 2022)
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = 2022)
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = 2022)
WTIEIA <- eia_series("PET.RWTC.D", start = 2019, end = 2022)
WTIEIA <- eia_series("PET.RWTC.D", start = "2019", end = "2022")
WTIEIA <- eia_series("PET.RWTC.D", start = "2019", end = "2022")
WTIEIA <- eia_series("PET.RWTC.D", start = "2019", end = "2022")
WTIEIA <- eia_series("PET.RWTC.D", start = "2019", end = "2022")
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
SPR_LEVEL <- eia_series("PET.WCSSTUS1.W", start = "2019", end = "2025")
SPR_LEVEL <- eia_series("PET.WCSSTUS1.W", start = "2019", end = "2025")
SPR_LEVEL <- eia_series("PET.WCSSTUS1.W", start = "2019", end = "2025")
SPR_LEVEL <- eia_series("PET.WCSSTUS1.W", start = "2019", end = "2025")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
STEO_Crude_Production <- eia_series("STEO.COPRPUS.M", start = "2019", end = "2026")
pacman::p_load(eia)
pacman::p_load(stringi,jsonlite,cli,remotes,magick,cowplot,knitr,ghostscript,png,httr,grid,usethis,pacman,rio,ggplot2,ggthemes,quantmod,dplyr,data.table,lubridate,forecast,gifski,av,tidyr,gganimate,zoo,RCurl,Cairo,datetime,stringr,pollster,tidyquant,hrbrthemes,plotly,fredr)
install_github("keberwein/blscrapeR")
library(blscrapeR)
pacman::p_load(eia)
library(eia)
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019")
eia_series("PET.WCRFPUS2.W", start = "2019", eia_get_key())
Crude_ProductionWeekly <- eia_series("PET.WCRFPUS2.W", start = "2019", eia_get_key())
eia_series("PET.WCRFPUS2.W", start = "2019", key = eia_get_key())
eia_series("PET.WCRFPUS2.W", start = "2019", key = eia_get_key())
eia_series("PET.WCRFPUS2.W", start = "2019", key = 'VnoNU6pDdPbzt0saPfNZfGXqNeCNdcH9fUZlDgMl')
eia_series("PET.WCRFPUS2.W", start = "2019", key = 'VnoNU6pDdPbzt0saPfNZfGXqNeCNdcH9fUZlDgMl')
eia_series("PET.WCRFPUS2.W", start = "2019", key = 'VnoNU6pDdPbzt0saPfNZfGXqNeCNdcH9fUZlDgMl')
eia_series("PET.WCRFPUS2.W", start = "2019", key = 'VnoNU6pDdPbzt0saPfNZfGXqNeCNdcH9fUZlDgMl')
XOP <- tq_get("XOP", from = "2006-07-01")
pacman::p_load(datetime,yearmon,lubridate,readr,stringi,jsonlite,cli,remotes,magick,cowplot,knitr,ghostscript,png,httr,grid,usethis,pacman,rio,ggplot2,ggthemes,quantmod,dplyr,data.table,lubridate,forecast,gifski,av,tidyr,gganimate,zoo,RCurl,Cairo,datetime,stringr,pollster,tidyquant,hrbrthemes,plotly,fredr)
XOP <- tq_get("XOP", from = "2006-07-01")
tq_get("XOP", from = "2006-07-01")
pacman::p_load(tidyquant,datetime,yearmon,lubridate,readr,stringi,jsonlite,cli,remotes,magick,cowplot,knitr,ghostscript,png,httr,grid,usethis,pacman,rio,ggplot2,ggthemes,quantmod,dplyr,data.table,lubridate,forecast,gifski,av,tidyr,gganimate,zoo,RCurl,Cairo,datetime,stringr,pollster,tidyquant,hrbrthemes,plotly,fredr)
tq_get("XOP", from = "2006-07-01")
?tq_get()
pacman::p_load(quantmod,tidyquant,datetime,yearmon,lubridate,readr,stringi,jsonlite,cli,remotes,magick,cowplot,knitr,ghostscript,png,httr,grid,usethis,pacman,rio,ggplot2,ggthemes,quantmod,dplyr,data.table,lubridate,forecast,gifski,av,tidyr,gganimate,zoo,RCurl,Cairo,datetime,stringr,pollster,tidyquant,hrbrthemes,plotly,fredr)
tq_get("XOP", from = "2006-07-01")
tq_get("XOP", from = "2006-07-01")
tq_get("XOP", from = "2006-07-01")
tq_get("XOP", from = "2006-07-01")
tq_get("XOP", from = "2006-07-01")
tq_get("XOP", from = "2006-07-01")
tq_get("XOP", from = "2006-07-01")
tq_get("XOP", from = "2006-07-01")
tq_get("XOP", from = "2006-07-01")
library(abind)
detach("package:abind", unload = TRUE)
library(abind)
library(alfred)
library(alphavantager)
library(anytime)
library(arrow)
library(askpass)
library(assertthat)
library(backports)
library(base64enc)
library(bdsmatrix)
library(BH)
library(bit)
library(bit64)
library(bitops)
library(blscrapeR)
library(brew)
library(brio)
library(broom)
library(cachem)
library(bslib)
library(callr)
library(car)
detach("package:carData", unload = TRUE)
library(cellranger)
library(carData)
library(censusapi)
library(chron)
library(classInt)
library(clipr)
library(collapse)
library(colorspace)
library(commonmark)
library(corrplot)
library(cpp11)
library(cpsR)
library(crayon)
library(credentials)
library(crosstalk)
library(curl)
detach("package:datetime", unload = TRUE)
library(datetime)
library(DBI)
library(desc)
library(devtools)
library(digest)
library(diffobj)
library(downlit)
detach("package:dplyr", unload = TRUE)
library(dplyr)
library(DSSAT)
library(e1071)
library(eia)
library(ellipsis)
library(epiextractr)
library(evaluate)
library(extrafont)
library(extrafontdb)
library(fansi)
library(farver)
tq_get("XOP", from = "2006-07-01")
library(fastmap)
library(fontawesome)
library(forcats)
library(Formula)
library(fracdiff)
library(fs)
library(furrr)
detach("package:future", unload = TRUE)
library(future.apply)
library(future)
library(gdtools)
library(gender)
library(generics)
library(gert)
tq_get("XOP", from = "2006-07-01")
library(ggpubr)
library(ggrepel)
library(ggsci)
library(ggsignif)
library(gh)
detach("package:gifski", unload = TRUE)
library(gifski)
library(gitcreds)
library(globals)
library(glue)
library(gower)
library(gridExtra)
library(gtable)
library(gtrendsR)
library(haven)
library(highr)
library(hms)
library(htmltools)
library(httpuv)
library(htmlwidgets)
library(igraph)
library(ini)
library(ipred)
library(isoband)
library(janitor)
library(jquerylib)
library(labeling)
library(labelled)
library(later)
library(lava)
library(lazyeval)
library(lifecycle)
library(listenv)
library(lme4)
library(lmtest)
library(lpSolve)
library(maptools)
library(magrittr)
library(MatrixModels)
library(maxLik)
library(mime)
library(memoise)
library(miniUI)
library(minqa)
library(munsell)
library(nloptr)
tq_get("XOP", from = "2006-07-01")
library(NLP)
library(numDeriv)
library(openNLP)
library(openNLPdata)
library(openssl)
library(openxlsx)
library(padr)
library(parallelly)
library(pbkrtest)
library(PerformanceAnalytics)
library(pillar)
library(pkgbuild)
library(pkgconfig)
library(pkgdown)
library(pkgload)
library(plm)
library(plotrix)
library(plyr)
library(polynom)
library(praise)
library(prettyunits)
library(processx)
library(prodlim)
library(profvis)
library(progress)
tq_get("XOP", from = "2006-07-01")
library(progressr)
library(promises)
library(proxy)
library(ps)
library(purrr)
library(qdap)
library(quadprog)
library(Quandl)
library(quantreg)
library(R6)
library(ragg)
library(rappdirs)
library(Rcpp)
library(rcmdcheck)
library(rbibutils)
library(RcppArmadillo)
library(RcppEigen)
detach("package:RCurl", unload = TRUE)
library(RcppRoll)
library(RCurl)
library(Rdpack)
library(readxl)
library(rematch)
library(rematch2)
library(reshape2)
library(riingo)
library(rJava)
library(rlang)
library(rmarkdown)
library(roxygen2)
library(rprojroot)
library(rsample)
library(rstatix)
library(rstudioapi)
library(Rttf2pt1)
library(rversions)
library(rvest)
library(s2)
library(sandwich)
library(sass)
library(scales)
library(seasonal)
library(selectr)
library(sessioninfo)
library(sf)
library(shiny)
library(slam)
library(slider)
library(snakecase)
library(sourcetools)
library(SQUAREM)
library(stringdist)
library(svglite)
tq_get("XOP", from = "2006-07-01")
library(sys)
library(systemfonts)
library(testthat)
library(textshaping)
library(tibble)
library(tidyselect)
library(timeDate)
library(tinytex)
library(tm)
library(transformr)
library(tseries)
library(tsfeatures)
library(tweenr)
library(tzdb)
library(urca)
library(units)
library(urlchecker)
library(utf8)
library(vctrs)
library(venneuler)
library(viridisLite)
library(vroom)
library(waldo)
library(warp)
library(whisker)
library(withr)
library(wk)
library(wordcloud)
library(x13binary)
library(xfun)
library(XML)
library(xml2)
library(xopen)
library(xtable)
library(yaml)
library(yfinance)
library(zip)
library(tidyquant)
install.packages(tidyquant)
install.packages("tidyquant")
install.packages("tidyquant")
library(tidyquant)
tq_get("XOP", from = "2006-07-01")
library(tidyquant)
library(tidyquant)
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
library(tidyquant)
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
library(tidyquant)
library(tidyquant)
p_unload(all)  # Remove all packages using the package manager
# Clear console
cat("\014")  # ctrl+L
rm(list = ls())
dev.off()
tq_get("CL=F", from = "2006-07-01")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
library(tidyquant)
pacman::p_load(quantmod,tidyquant,datetime,yearmon,lubridate,readr,stringi,jsonlite,cli,remotes,magick,cowplot,knitr,ghostscript,png,httr,grid,usethis,pacman,rio,ggplot2,ggthemes,quantmod,dplyr,data.table,lubridate,forecast,gifski,av,tidyr,gganimate,zoo,RCurl,Cairo,datetime,stringr,pollster,tidyquant,hrbrthemes,plotly,fredr)
install.packages(pacman)
install.packages("pacman")
pacman::p_load(quantmod,tidyquant,datetime,yearmon,lubridate,readr,stringi,jsonlite,cli,remotes,magick,cowplot,knitr,ghostscript,png,httr,grid,usethis,pacman,rio,ggplot2,ggthemes,quantmod,dplyr,data.table,lubridate,forecast,gifski,av,tidyr,gganimate,zoo,RCurl,Cairo,datetime,stringr,pollster,tidyquant,hrbrthemes,plotly,fredr)
install.packages("tidyquant")
install.packages("tidyquant")
library(tidyquant)
library(tidyquant)
library(tidyquant)
library(tidyquant)
library(tidyquant)
install.packages("tidyquant", dependencies = FALSE)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("rlang")
install.packages("rlang")
pacman("ggplot2")
pacman("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(data = CONSUMER_LOAN_ASSETS, aes(x = date, y = value/1000, fill = name)) + #plotting permanent and temporary job losers
annotate("hline", y = 0, yintercept = 0, color = "white", size = .5) +
geom_area(stat = "identity", position = "stack", color = NA) +
xlab("Date") +
ylab("Trillions of Dollars") +
scale_y_continuous(labels = scales::dollar_format(accuracy = 0.5, suffix = "T"), breaks = c(0,0.5,1,1.5,2,2.5), limits = c(0,2.5), expand = c(0,0)) +
ggtitle("Back to Borrowing") +
labs(caption = "Graph created by @JosephPolitano using Federal Reserve data", subtitle = "Consumer Loan Assets are Still Increasing") +
theme_apricitas + theme(legend.position = c(.45,.75)) +
scale_fill_manual(name= "Consumer Loan Assets of Commercial Banks in the United States",values = c("#FFE98F","#00A99D","#EE6055","#9A348E","#A7ACD9","#3083DC"), breaks = c("Credit Cards and Other Revolving Loans","Automobile Loans","Other Consumer Loans")) +
annotation_custom(apricitas_logo_rast, xmin = as.Date("2015-01-07")-(.1861*(today()-as.Date("2015-01-07"))), xmax = as.Date("2015-01-07")-(0.049*(today()-as.Date("2015-01-07"))), ymin = 0-(.3*2.5), ymax = 0) + #these repeated sections place the logo in the bottom-right of each graph. The first number in all equations is the chart's origin point, and the second number is the exact length of the x or y axis
coord_cartesian(clip = "off")
cat("\014")  # ctrl+L
rm(list = ls())
dev.off()
setwd("~/GitHub/Apricitas/New folder")
